import java.awt.BorderLayout;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import weka.classifiers.Classifier;
import weka.classifiers.Evaluation;
import weka.classifiers.evaluation.NominalPrediction;
import weka.classifiers.evaluation.ThresholdCurve;
import weka.classifiers.functions.LibSVM;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.trees.J48;
import weka.core.FastVector;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.Utils;
import weka.gui.boundaryvisualizer.BoundaryVisualizer;
import weka.gui.treevisualizer.PlaceNode2;
import weka.gui.treevisualizer.TreeVisualizer;
import weka.gui.visualize.PlotData2D;
import weka.gui.visualize.ThresholdVisualizePanel;

//
public class CompareClassifiers {

	public static BufferedReader readDataFile(String filename) {
		BufferedReader inputReader = null;
		try {
			inputReader = new BufferedReader(new FileReader(filename));
		} catch (FileNotFoundException ex) {
			System.err.println("File not found: " + filename);
		}
		return inputReader;
	}

	public static Evaluation classify(Classifier model, Instances trainingSet,
			Instances testingSet) throws Exception {
		Evaluation evaluation = new Evaluation(trainingSet);
		model.buildClassifier(trainingSet);
		evaluation.evaluateModel(model, testingSet);
		// Metrics
		System.out.println(evaluation.toSummaryString());
		//
		System.out.println(evaluation.toMatrixString());
		//
		return evaluation;
	}

	public static double calculateAccuracy(FastVector predictions) {
		double correct = 0;
		for (int i = 0; i < predictions.size(); i++) {
			NominalPrediction np = (NominalPrediction) predictions.elementAt(i);
			if (np.predicted() == np.actual()) {
				correct++;
			}
		}
		return 100 * correct / predictions.size();
	}

	public static Instances[][] crossValidationSplit(Instances data,
			int numberOfFolds) {
		Instances[][] split = new Instances[2][numberOfFolds];
		for (int i = 0; i < numberOfFolds; i++) {
			split[0][i] = data.trainCV(numberOfFolds, i);
			split[1][i] = data.testCV(numberOfFolds, i);
		}
		return split;
	}

	public static void main(String[] args) throws Exception {
		BufferedReader datafile = readDataFile("C://Program Files//Weka-3-6//data//banana.arff");
		Instances data = new Instances(datafile);
		data.setClassIndex(data.numAttributes() - 1);
		// Do 10-split cross validation
		// Instances[][] split = crossValidationSplit(data, 10);
		// Separate split into training and testing arrays
		// Instances[] trainingSplits = split[0];
		// Instances[] testingSplits = split[1];
		// Use a set of classifiers
		//
		int trainSize = (int) Math.round(data.numInstances() * 0.075471698);
		int testSize = data.numInstances() - trainSize;
		Instances train = new Instances(data, 0, trainSize);
		Instances test = new Instances(data, trainSize, testSize);
		//
		int iter = 1; // computation time calculation !
		for (int i = 0; i < iter; i++)
		{	
			System.out.println("Start System Time is "
					+ System.currentTimeMillis());
			Classifier[] models = {
									new AdaBoostM1() // AdaBoost
											};
			// FastVector
			FastVector predictions = new FastVector();
			// Run for each model
			// Collect every group of predictions for current model in a
			// For each training-testing split pair, train and test the
			// classifier
			for (int j = 0; j < models.length; j++) {
				// for (int i = 0; i < trainingSplits.length; i++) {
				// Evaluation validation = classify(models[j], trainingSplits[i],
				// testingSplits[i]);
				//
				Evaluation validation = classify(models[j], train, test);
				predictions.appendElements(validation.predictions());
					// Uncomment to see the summary for each training-testing pair.
					// System.out.println(models[j].toString());
				// }
				// Calculate overall accuracy of current classifier on all splits
				double accuracy = calculateAccuracy(predictions);
				System.out.println("End System Time is "
						+ System.currentTimeMillis());
				// Print current classifier's name and accuracy in a complicated,
				// but nice-looking way.
				System.out.println("Accuracy of "
						+ models[j].getClass().getSimpleName() + ": "
						+ String.format("%.2f%%", accuracy)
						+ "\n---------------------------------");
				ThresholdCurve tc = new ThresholdCurve();
				ThresholdVisualizePanel vmc = new ThresholdVisualizePanel();
				vmc.setROCString("(Area under ROC = "
						+ Utils.doubleToString(tc.getROCArea(data), 4) + ")");
				vmc.setName(train.relationName());
				PlotData2D tempd = new PlotData2D(data);
				tempd.setPlotName(data.relationName());
				tempd.addInstanceNumberAttribute();
				// specify which points are connected
				boolean[] cp = new boolean[data.numInstances()];
				for (int n = 1; n < cp.length; n++)
					cp[n] = true;
				// tempd.setConnectPoints(cp);
				// add plot
				vmc.addPlot(tempd);
				// method visualizeClassifierErrors
				String plotName = vmc.getName();
				final javax.swing.JFrame jf = new javax.swing.JFrame(
						"SMAI Classifier Graph: " + plotName);
				jf.setSize(500, 500);
				// jf.getContentPane().setLayout(new BorderLayout());
				jf.getContentPane().add(vmc, BorderLayout.CENTER);
				jf.addWindowListener(new java.awt.event.WindowAdapter() {
					public void windowClosing(java.awt.event.WindowEvent e) {
						jf.dispose();
					}
				});
				jf.setVisible(true);
			}
	//
			System.out.println("Start System Time for Decision Tree is "
					+ System.currentTimeMillis());
			J48 DT = new J48();
			Evaluation validationDT = classify(DT, train, test);
			predictions.appendElements(validationDT.predictions());
			// Uncomment to see the summary for each training-testing pair.
			// System.out.println(models[j].toString());
			// }
			// Calculate overall accuracy of current classifier on all splits
			double accuracyDT = calculateAccuracy(predictions);
			// Print current classifier's name and accuracy in a complicated,
			// but nice-looking way.
			System.out.println("End System Time for Decision Tree is "
					+ System.currentTimeMillis());
			System.out.println("Accuracy of Decision Tree : "
					+ String.format("%.2f%%", accuracyDT)
					+ "\n---------------------------------");
	//
			final javax.swing.JFrame jfDT = new javax.swing.JFrame(
					"Tree Visualizer: ID 3");
			jfDT.setSize(500, 400);
			jfDT.getContentPane().setLayout(new BorderLayout());
			TreeVisualizer tv = new TreeVisualizer(null, DT.graph(),
					new PlaceNode2());
			jfDT.getContentPane().add(tv, BorderLayout.CENTER);
			jfDT.addWindowListener(new java.awt.event.WindowAdapter() {
				public void windowClosing(java.awt.event.WindowEvent e) {
					jfDT.dispose();
				}
			});
			//
			jfDT.setVisible(true);
			tv.fitToScreen();
			// SVM
			System.out.println("Start System Time for SVM is "
					+ System.currentTimeMillis());
			LibSVM libSVM = new LibSVM();
	//
			libSVM.setCacheSize(4096);
			libSVM.setNormalize(true);
	// libSVM.setShrinking(true);
	// best case for Polynomial is C - 100 and Degree - 3
			libSVM.setKernelType(new SelectedTag(LibSVM.KERNELTYPE_RBF,
			 LibSVM.TAGS_KERNELTYPE));
			// libSVM.setKernelType(new
			// SelectedTag(LibSVM.KERNELTYPE_POLYNOMIAL,
			// LibSVM.TAGS_KERNELTYPE));
				// best case for Polynomial is C - 100000 and Degree - 5
			// libSVM.setCost(1);
			// libSVM.setDegree(5);
			libSVM.setGamma(0.1);
	//
			Evaluation validationSVM = classify(libSVM, train, test);
			predictions.appendElements(validationSVM.predictions());
			// Calculate overall accuracy of current classifier on all splits
			double accuracySVM = calculateAccuracy(predictions);
			// Print current classifier's name and accuracy in a complicated,
			// but nice-looking way.
			System.out.println("End System Time for SVM is "
					+ System.currentTimeMillis());
			System.out.println("Accuracy of SVM Classifier : "
					+ String.format("%.2f%%", accuracySVM)
					+ "\n---------------------------------");
			final javax.swing.JFrame jfSVM = new javax.swing.JFrame(
					"SVM Visualizer - Polynomial Kernel");
			jfSVM.setSize(500, 400);
			// jf.getContentPane().setLayout(new BorderLayout());
			BoundaryVisualizer bv = new BoundaryVisualizer();
			jfSVM.getContentPane().add(bv, BorderLayout.CENTER);
			bv.setName("SVM Visualizer - Polynomial Kernel");
			jfSVM.setSize(bv.getMinimumSize());
			jfSVM.setName(bv.getName());
			bv.createNewVisualizerWindow(libSVM, data);

			// }
		}
//		
	}
}
